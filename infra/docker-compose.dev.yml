version: "3.9"                 # Compose file format.

name: yourcomics-dev           # Project name visible in `docker ps`.

services:
  postgres:
    image: postgres:16         # Official image (v16).
    container_name: yc-postgres
    restart: unless-stopped    # Auto-restart unless you stop it.
    env_file: .env.dev         # Load variables from our dev env file.
    environment:
      - POSTGRES_USER=${POSTGRES_USER}        # ${VAR} expands from env_file
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"            # HOST:CONTAINER → exposes Postgres to your Mac.
    volumes:
      - pgdata:/var/lib/postgresql/data  # Named volume = persistent DB storage.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10
      # Why `$$`? Compose expands ${...} early. We want the shell to expand $ inside the container,
      # so we escape it as $$ for the outer layer.

  redis:
    image: redis:7
    container_name: yc-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"   # Uses REDIS_PORT from .env.dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  minio:
    image: quay.io/minio/minio:latest
    container_name: yc-minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
      # `command:` overrides the image default to start the MinIO server and bind the web console port.
    restart: unless-stopped
    env_file: .env.dev
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_API_PORT}:9000"      # S3 API endpoint
      - "${MINIO_CONSOLE_PORT}:9001"  # Web console
    volumes:
      - minio-data:/data              # Where MinIO stores buckets/objects.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 20

  caddy:
    image: caddy:2
    container_name: yc-caddy
    restart: unless-stopped
    ports:
      - "${CADDY_HTTP_PORT}:8080"     # Expose Caddy’s HTTP to your Mac.
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
        # Bind-mount our config; :ro means read-only inside the container.
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
      # `depends_on` controls start order (not readiness). Healthchecks above help *you* know readiness.

volumes:
  pgdata:
  minio-data:

